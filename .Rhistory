# Load Data
load("movies.Rdata")
# Omits sections in the data we don't need
# ex: 1:2 removes column 1 to 2
dfm <- movies[ -c(1:2, 5:12, 14:15, 24:32)]
dfm <- na.omit(dfm)
#Shows list of variables left over
str(dfm)
#Histogram of audience score
hist(dfm$audience_score)
#Histogram of IMDB rating
hist(dfm$imdb_rating)
#Histogram of critics score
hist(dfm$critics_score)
#statistical Summaries of different metrics
summary(dfm$audience_score)
summary(dfm$imdb_rating)
summary(dfm$critics_score)
#Pairwise correlation between columns 3-6
ggpairs(dfm, columns= 3:6)
library(dplyr)
library(statsr)
library(leaps)
library(grid)
library(gridExtra)
library(GGally)
# Load Data
load("movies.Rdata")
# Omits sections in the data we don't need
# ex: 1:2 removes column 1 to 2
dfm <- movies[ -c(1:2, 5:12, 14:15, 24:32)]
dfm <- na.omit(dfm)
#Shows list of variables left over
str(dfm)
#Histogram of audience score
hist(dfm$audience_score)
#Histogram of IMDB rating
hist(dfm$imdb_rating)
#Histogram of critics score
hist(dfm$critics_score)
#statistical Summaries of different metrics
summary(dfm$audience_score)
summary(dfm$imdb_rating)
summary(dfm$critics_score)
#Pairwise correlation between columns 3-6
ggpairs(dfm, columns= 3:6)
#Pairwise correlation between columns 6-11
ggpairs(dfm, columns= 6:11)
library(dplyr)
library(statsr)
library(leaps)
library(grid)
library(gridExtra)
library(GGally)
# Load Data
load("movies.Rdata")
# Omits sections in the data we don't need
# ex: 1:2 removes column 1 to 2
dfm <- movies[ -c(1:2, 5:12, 14:15, 24:32)]
dfm <- na.omit(dfm)
#Shows list of variables left over
str(dfm)
#Histogram of audience score
hist(dfm$audience_score)
#Histogram of IMDB rating
hist(dfm$imdb_rating)
#Histogram of critics score
hist(dfm$critics_score)
#statistical Summaries of different metrics
summary(dfm$audience_score)
summary(dfm$imdb_rating)
summary(dfm$critics_score)
#Pairwise correlation between columns 3-6
#Rating variables
ggpairs(dfm, columns= 3:6)
#Pairwise correlation between columns 6-11
#Award variables
ggpairs(dfm, columns= 6:11)
#Audience score vs Gene
#Box Plots for each Genre as well
ggplot(dfm, aes(x=factor(genre), y=audience_score)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
library(dplyr)
library(statsr)
library(leaps)
library(grid)
library(gridExtra)
library(GGally)
# Load Data
load("movies.Rdata")
# Omits sections in the data we don't need
# ex: 1:2 removes column 1 to 2
dfm <- movies[ -c(1:2, 5:12, 14:15, 24:32)]
dfm <- na.omit(dfm)
#Shows list of variables left over
str(dfm)
#Histogram of audience score
hist(dfm$audience_score)
#Histogram of IMDB rating
hist(dfm$imdb_rating)
#Histogram of critics score
hist(dfm$critics_score)
#statistical Summaries of different metrics
summary(dfm$audience_score)
summary(dfm$imdb_rating)
summary(dfm$critics_score)
#Pairwise correlation between columns 3-6
#Rating variables
ggpairs(dfm, columns= 3:6)
#Pairwise correlation between columns 6-11
#Award variables
ggpairs(dfm, columns= 6:11)
#Audience score vs. Gene
#Box Plots for each Genre as well
ggplot(dfm, aes(x=factor(genre), y=audience_score)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
#Audience score vs. runtime
ggplot(dfm, aes(x=runtime, y=audience_score)) +
geom_point() + stat_smooth(method=lm, level=0.95)
library(dplyr)
library(statsr)
library(leaps)
library(grid)
library(gridExtra)
library(GGally)
# Load Data
load("movies.Rdata")
# Omits sections in the data we don't need
# ex: 1:2 removes column 1 to 2
dfm <- movies[ -c(1:2, 5:12, 14:15, 24:32)]
dfm <- na.omit(dfm)
#Shows list of variables left over
str(dfm)
#Histogram of audience score
hist(dfm$audience_score)
#Histogram of IMDB rating
hist(dfm$imdb_rating)
#Histogram of critics score
hist(dfm$critics_score)
#statistical Summaries of different metrics
summary(dfm$audience_score)
summary(dfm$imdb_rating)
summary(dfm$critics_score)
#Pairwise correlation between columns 3-6
#Rating variables
ggpairs(dfm, columns= 3:6)
#Pairwise correlation between columns 6-11
#Award variables
ggpairs(dfm, columns= 6:11)
#Audience score vs. Gene
#Box Plots for each Genre as well
ggplot(dfm, aes(x=factor(genre), y=audience_score)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
#Audience score vs. runtime
ggplot(dfm, aes(x=runtime, y=audience_score)) +
geom_point() + stat_smooth(method=lm, level=0.95)
# This plot shows there is a weak correlation, thus we can throw
# out the variable
dfm2 <- dfm[ -c(2, 7:11)]
library(dplyr)
library(statsr)
library(leaps)
library(grid)
library(gridExtra)
library(GGally)
# Load Data
load("movies.Rdata")
# Omits sections in the data we don't need
# ex: 1:2 removes column 1 to 2
dfm <- movies[ -c(1:2, 5:12, 14:15, 24:32)]
dfm <- na.omit(dfm)
#Shows list of variables left over
str(dfm)
#Histogram of audience score
hist(dfm$audience_score)
#Histogram of IMDB rating
hist(dfm$imdb_rating)
#Histogram of critics score
hist(dfm$critics_score)
#statistical Summaries of different metrics
summary(dfm$audience_score)
summary(dfm$imdb_rating)
summary(dfm$critics_score)
#Pairwise correlation between columns 3-6
#Rating variables
ggpairs(dfm, columns= 3:6)
#Pairwise correlation between columns 6-11
#Award variables
ggpairs(dfm, columns= 6:11)
#Audience score vs. Gene
#Box Plots for each Genre as well
ggplot(dfm, aes(x=factor(genre), y=audience_score)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
#Audience score vs. runtime
ggplot(dfm, aes(x=runtime, y=audience_score)) +
geom_point() + stat_smooth(method=lm, level=0.95)
# This plot shows there is a weak correlation, thus we can throw
# out the variable
dfm2 <- dfm[ -c(2, 7:11)]
#New list of variables
names(dfm2)
#Adjusted R-Squared approach with backwards elimination
m_full <- lm(audience_score ~ genre + imdb_rating + critics_score
+ audience_rating, data = dfm2)
summary(m_full)
#First round of elimination toawrds adjusted R_squared
m_1noAR <- lm(audience_score ~ genre + imdb_rating + critics_score
, data = dfm2)
#First round of elimination toawrds adjusted R_squared
m_1_noAR <- lm(audience_score ~ genre + imdb_rating + critics_score
, data = dfm2)
summary(m_1_noAR)$adj.r.squared
#Round 2
m_1_noCS <- lm(audience_score ~ genre + imdb_rating + audience_rating,
data = dfm2)
summary(m_1_noCS)$adj.r.squared
#Round 3
#Removing Genre
m_1_noGE <- lm(audience_score ~ imdb_rating + critics_score +
audience_rating, data = dfm2)
summary(m_1_noGE)$adj.r.squared
#Round 3
#Removing IMDB Rating
m_1_noIR <- lm(audience_score ~ genre + critics_score + audience_rating,
data = dfm2)
summary(m_1_noIR)$adj.r.squared
# 1 - Check normal Probablility
qqnorm(m_full$residuals, main="Normality Condition")
qqline(m_full$residuals, main="Normality Condition")
# Library Imports
library(ggplot2)
library(dplyr)
# Library Imports
library(ggplot2)
library(dplyr)
library(statsr)
library(leaps)
library(grid)
library(gridExtra)
library(gridExtra)
setwd("C:/Users/Brandon Renwick/Desktop/data_mining_mini_prj")
# Library Imports
library(ggplot2)
library(dplyr)
library(statsr)
library(leaps)
install.packages("statsr")
# Library Imports
library(ggplot2)
library(dplyr)
library(statsr)
library(leaps)
install.packages("leaps")
library(leaps)
library(grid)
library(gridExtra)
library(GGally)
install.packages("GGally")
library(GGally)
# Omits sections in the data we don't need
# ex: 1:2 removes column 1 to 2
dfm <- movies[ -c(1:2, 5:12, 14:15, 24:32)]
dfm <- na.omit(dfm)
#Shows list of variables left over
str(dfm)
#Histogram of audience score
hist(dfm$audience_score)
#Histogram of IMDB rating
hist(dfm$imdb_rating)
#Histogram of critics score
hist(dfm$critics_score)
#statistical Summaries of different metrics
summary(dfm$audience_score)
summary(dfm$imdb_rating)
summary(dfm$critics_score)
#Pairwise correlation between columns 3-6
#Rating variables
ggpairs(dfm, columns= 3:6)
#Pairwise correlation between columns 6-11
#Award variables
ggpairs(dfm, columns= 6:11)
#Audience score vs. Gene
#Box Plots for each Genre as well
ggplot(dfm, aes(x=factor(genre), y=audience_score)) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
#Audience score vs. runtime
ggplot(dfm, aes(x=runtime, y=audience_score)) +
geom_point() + stat_smooth(method=lm, level=0.95)
# This plot shows there is a weak correlation, thus we can throw
# out the variable
dfm2 <- dfm[ -c(2, 7:11)]
#New list of variables
names(dfm2)
#Adjusted R-Squared approach with backwards elimination
#How does each variable affect audience_score
m_full <- lm(audience_score ~ genre + imdb_rating + critics_score
+ audience_rating, data = dfm2)
summary(m_full)
#Round 1 of elimination toawrds adjusted R_squared
#Removing audience_rating
m_1_noAR <- lm(audience_score ~ genre + imdb_rating + critics_score
, data = dfm2)
summary(m_1_noAR)$adj.r.squared
#Round 2
#Removing critics_score
m_1_noCS <- lm(audience_score ~ genre + imdb_rating + audience_rating,
data = dfm2)
summary(m_1_noCS)$adj.r.squared
#Round 3
#Removing IMDB Rating
m_1_noIR <- lm(audience_score ~ genre + critics_score + audience_rating,
data = dfm2)
summary(m_1_noIR)$adj.r.squared
#Round 4
#Removing Genre
m_1_noGE <- lm(audience_score ~ imdb_rating + critics_score +
audience_rating, data = dfm2)
summary(m_1_noGE)$adj.r.squared
# 1 - Check normal Probablility
qqnorm(m_full$residuals, main="Normality Condition")
qqline(m_full$residuals, main="Normality Condition")
#Minor Irregularities, no serious outliers
#Minor Irregularities, no serious outliers
#Minor Irregularities, no serious outliers
#Minor Irregularities, no serious outliers
View(dfm)
View(dfm)
#Minor Irregularities, no serious outliers
hist(m_full$residuals, prob=TRUE, main="Normality Condition")
#2 Check Variability of the residuals
ggplot(data = m_full, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
# Library Imports
library(ggplot2)
#2 Check Variability of the residuals
ggplot(data = m_full, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
par(mfrow = c(1,2))
plot(m_full$fitted.values, m_full$residuals)
plot(m_full$fitted.values, abs(m_full$residuals))
#3 Check Independency
plot(m_full$residuals, main="Independency Conditions")
anova(m_full)
#4 Check Linearity: residuals vs predictor variables
plot(m_full$residuals ~ dfm2$imdb_rating, main="Linearity Condition - imdb")
plot(m_full$residuals ~ dfm2$genre, main="Linearity Condition - genre")
plot(m_full$residuals ~ dfm2$audience_rating, main="Linearity Condition - audience_rating")
plot(m_full$residuals ~ dfm2$critics_score, main="Linearity Condition - critics_score")
genre <- "Animation"
imdb_rating <- 7.5
critics_score <- 95
audience_rating <- "Upright"
audience_score <-86
TestA <- data.frame (genre, imdb_rating, critics_score, audience_rating, audience_score)
prediction_JBA <- predict(m_full, newdata = TestA, interval="confidence")
prediction_JBA
myPrediction <- round(predict(m_full, TestA), digits=0)
c(myPrediction, TestA$audience_score)
genre <- "Other"
TestO <- data.frame(genre, imdb_rating, critics_score, audience_rating, audience_score)
prediction_JBO <- predict(m_full, newdata=TestO, interval="confidence")
prediction_JBO
myPrediction <- round(predict(m_full, TestO), digits = 0)
c(myPrediction, TestO$audience_score) #compare fitted and observed values
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
# Library Imports
library(ggplot2)
library(dplyr)
library(statsr)
library(leaps)
library(grid)
library(gridExtra)
library(GGally)
#Load Movie Data
load("movies.Rdata")
View(movies)
load("C:/Users/Brandon Renwick/Desktop/data_mining_mini_prj/mini_project/Mini_Project.R")
setwd("C:/Users/Brandon Renwick/Desktop/data_mining_mini_prj/mini_project")
View(TestO)
#Package Imports
library(ggplot2)
library(dplyr)
#Package Imports
library(ggplot2)
library(dplyr)
library(statsr)
library(leaps)
library(grid)
library(gridExtra)
library(GGally)
library(GGally)
load("C:/Users/Brandon Renwick/Desktop/data_mining_mini_prj/mini_project/movies.Rdata")
load("C:/Users/Brandon Renwick/Desktop/data_mining_mini_prj/mini_project/movies.Rdata")
setwd("C:/Users/Brandon Renwick/Desktop/data_mining_mini_prj/mini_project")
#Load Movie Data
load("movies.Rdata")
View(movies)
View(movies)
#Cleaning Data
newData <- movies[ -c(1:2, 6:12, 14:15, 17:23, 25:32)]
newData <- na.omit(newData)
View(newData)
View(newData)
#Cleaning Data
newData <- movies[ -c(1:2, 6:12, 14:15, 18:23, 25:32)]
newData <- na.omit(newData)
View(movies)
View(movies)
#Cleaning Data
newData <- movies[ -c(1:2, 6:12, 14:15, 17, 19:23, 25:32)]
newData <- na.omit(newData)
str(newData)
hist(newData$top200_box)
View(movies)
View(movies)
#Cleaning Data
newData <- movies[ -c(1:2, 6:12, 14:15, 17, 19:23, 25:32)]
newData <- na.omit(newData)
str(newData)
hist(newData$critics_score)
hist(newData$runtime)
hist(newData$imdb_rating)
hist(newData$audience_score)
hist(newData$mpaa_rating)
summary(newData$critics_score)
summary(newData$runtime)
summary(newData$audience_score)
ggpairs(newData, columns = 4:6)
ggpairs(newData, columns = 4:6)
ggpairs(newData, columns = 1:7)
ggpairs(newData, columns = 6:7)
ggplot(newData, aes(x=factor(genre), y=critics_score))+
geom_boxplot() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(newData, aes(x=runtime, y=critics_score)) +
geom_point() + stat_smooth(method=lm, level=0.95)
View(dfm)
View(dfm)
newData2 <- newData[-c(2)]
names(newData2)
View(newData2)
View(newData2)
m_full <- lm(critics_score ~ genre + imdb_rating + audience_score + top200_box +
mpaa_rating, data=newData2)
summary(m_full)
m_1_noAR <- lm(critics_score ~ genre + imdb_rating + audience_score + top200_box +
mpaa_rating, data=newData2)
summary(m_1_noAR)$ajd.r.squared
m_1_noAR <- lm(critics_score ~ genre + imdb_rating + audience_score + top200_box +
mpaa_rating, data=newData2)
summary(m_1_noAR)$ajd.r.squared
summary(m_1_noAR)$adj.r.squared
m_1_noGENRE <- lm(critics_score ~ genre + imdb_rating + audience_score + top200_box +
mpaa_rating, data=newData2)
summary(m_1_noAR)$adj.r.squared
m_1_noIMDB <- lm(critics_score ~ genre + audience_score + top200_box + mpaa_rating, data=newData2)
sumary(m_1_noIMDB)
summary(m_1_noIMDB)
summary(m_1_noIMDB)$adj.r.squared
m_1_noASCORE <- lm(critics_score ~ genre + imdb_rating + top200_box + mpaa_rating, data=newData2)
summary(m_1_noASCORE)$adj.r.squared
m_1_no200 <- lm(critics_score ~ genre + imdb_rating + audience_score + mpaa_rating, data=newData2)
summary(m_1_no200)$adj.r.squared
m_1_noMPAA <- lm(critics_score ~ genre + imdb_rating + audience_score + top200_box, data=newData2)
summary(m_1_noMPAA)$adj.r.squared
#--Model Diagnostics (rule of 4)--#
qqnorm(m_full$residuals, main="Normality Condition")
m_1_noGENRE <- lm(critics_score ~ genre + imdb_rating + audience_score + top200_box +
mpaa_rating, data=newData2)
#--Model Diagnostics (rule of 4)--#
qqnorm(m_full$residuals, main="Normality Condition")
qqline(m_full$residuals, main="Normality Condition")
#No major outliers
hist(m_full$residuals, prob=TRUE, main="Normality Condition")
# 2) Checking Variability of Residuals
ggplot(data=m_full, aes(x=.fitted, y=.resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
par(mfrow=c(1,2))
plot(m_full$fitted.values, m_full$residuals)
plot(m_full$fitted.values, m_full$residuals)
# 3) Check for Independence
plot(m_full$residuals, main="Independency Conditions")
# 3) Check for Independence
plot(m_full$residuals, main="Independency Conditions")
anova(m_full)
plot(m_full$residuals ~ newData2$imdb_rating, main="Linearity Condition - imdb")
plot(m_full$residuals ~ newData2$genre, main="Linearity Condition - genre")
plot(m_full$residuals ~ newData2$top200_box, main="Linearity Condition - top200")
plot(m_full$residuals ~ newData2$audience_score, main="Linearity Condition - audience score")
plot(m_full$residuals ~ newData2$mpaa_rating, main="Linearity Condition - MPAA Rating")
View(movies)
View(movies)
View(movies)
genre <- "Drama"
mpaa_rating <- "R"
imdb_rating <- 7.6
audience_score <- 84
top200_box <- "no"
critics_score <- 98
TestA <- data.frame(genre, mpaa_rating, imdb_rating, audience_score, top200_box, critics_score)
prediction_JBA <- predict(m_full, newdata = TestA, interval = "confidence")
prediction_JBA
